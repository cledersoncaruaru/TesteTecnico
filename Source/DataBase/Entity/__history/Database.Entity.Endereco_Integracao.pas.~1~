unit Database.Entity.Endereco_Integracao;

interface


uses

UDM,
DataBase.Generics,



FireDAC.Comp.Client;




  type

  TEndereco_Integracao = Class


  Private

  Public



  Property idendereco       : LongInt  read Fidendereco write Setidendereco;
  Property idpessoa         : LongInt  read Fidpessoa write Setidpessoa;
  Property dscep            : String  read Fdscep write Setdscep;




  end;




  Function Cria_Tabela_Endereco : Boolean;





implementation

uses
  System.SysUtils;




Function Cria_Tabela_Endereco : Boolean;
Var
  Tabela : TFDQuery;
begin

 Result := False;

 try

  Tabela             := TFDQuery.Create(nil);
  Tabela.Connection  := DM.Connection;


   if not TabelaExiste('endereco') then
   begin



    Tabela.SQL.Clear;

    Tabela.Sql.Add(' CREATE TABLE endereco (                        ');

    Tabela.Sql.Add(' idendereco        bigserial NOT NULL,          ');
    Tabela.Sql.Add(' idpessoa          int8 NOT NULL,               ');
    Tabela.Sql.Add(' dscep             VARCHAR(15),                 ');


    Tabela.Sql.Add(' CONSTRAINT endereco_pk PRIMARY KEY (idendereco),                                   ');
    Tabela.Sql.Add(' CONSTRAINT endereco_fk_pessoa  FOREIGN KEY (idpessoa) REFERENCES pessoa on DELETE cascade ');
    Tabela.Sql.Add('  );                                                                                ');


    // Criar Index


      Tabela.Connection.StartTransaction;
      try
        Tabela.ExecSQL;
        Tabela.Connection.Commit;
        Result:= True;
      except

        on E: Exception do begin

          Tabela.Connection.Rollback;
//          Telegram_Send('DataBase.Tables - CREATE TABLE pessoa - '+ E.Message);
//          Log Sendo enviado para tabela de Log,Telegram ou qualquer forma de Log
//          Sendo assim tem um Historico de Logs de Erros na Aplicação
          raise Exception.Create(E.Message);


        end;

      end;

      if not GeneratorExiste('idendereco') then begin

        Tabela.SQL.Clear;
        Tabela.SQL.Add('CREATE GENERATOR idendereco');

        try
          Tabela.ExecSQL;
          Result:= True;
        except

           on E: Exception do begin

            Tabela.Connection.Rollback;
            raise Exception.Create(E.Message);
//            Telegram_Send('DataBase.Tables - CREATE TABLE pessoa - GENERATOR - '+ E.Message);
//          Log Sendo enviado para tabela de Log,Telegram ou qualquer forma de Log
//          Sendo assim tem um Historico de Logs de Erros na Aplicação


          end;

        end;

      end;



    end
    else
    begin

       // Verificar Campos na tabelas criado posterior ao Banco de Dados

    end;









 finally

 Tabela.Free;

 end;




end;



end.

