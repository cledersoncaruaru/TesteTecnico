unit Database.Dao.Endereco_Integracao;

interface


uses

UDM,
IdHTTP,
DataBase.Generics,
DataBase.Entity.Endereco_Integracao,

//System.JSON,

  REST.Types, REST.Client, Data.Bind.Components,
  Data.Bind.ObjectScope, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  REST.Response.Adapter;



Function Set_Endereco_Integracao(Endereco_Integracao:TEndereco_Integracao):Boolean;

Function Get_Cep(Cep:String):TFDMemTable;


//Function Get_Endereco(Cep:String; Var dsuf, nmcidade, nmbairro, nmlogradouro, dscomplemento:String):TJSONObject;




//Procedure CarregaDadosEndereco(jsonArray: TJSONArray);





implementation

uses
  System.SysUtils, System.Classes;


Function Get_Cep(Cep:String):TFDMemTable;
//Var
//    RESTClient1: TRESTClient;
//    RESTRequest1: TRESTRequest;
//    RESTResponse1: TRESTResponse;
//    RESTResponseDataSetAdapter1: TRESTResponseDataSetAdapter;
//    FDMemTable1: TFDMemTable;
begin



  try

   DM.RESTClient1.BaseURL  := 'https://viacep.com.br/ws/'+Cep+'/json';
   DM.RESTRequest1.Execute;


//    RESTRequest1:=TRESTRequest.Create(Nil);
//    RESTResponse1:=TRESTResponse.Create(Nil);
//    RESTClient1:= TRESTClient.Create(Nil);
//    RESTResponseDataSetAdapter1:=TRESTResponseDataSetAdapter.Create(Nil);
//    FDMemTable1:= TFDMemTable.Create(Nil);



//  RESTRequest1.Response  := RESTResponse1;
//  RESTRequest1.Client    := RESTClient1;
//
//  RESTClient1.BaseURL  := 'https://viacep.com.br/ws/55028470/json';
//  RESTResponseDataSetAdapter1.Dataset   := FDMemTable1;
//  RESTResponseDataSetAdapter1.Response  := RESTResponse1;
////  RESTResponseDataSetAdapter1.TypesMode := 'JSONOnly';
//
//  RESTRequest1.Execute;
//
//
//  var teste : string := FDMemTable1.FieldByName('logradouro').AsString;




  finally

//    RESTClient1.Free;
//    RESTRequest1.Free;
//    RESTResponse1.Free;
//    RESTResponseDataSetAdapter1.Free;
//    FDMemTable1.Free;


  end;




end;



//procedure CarregaDadosEndereco(jsonArray: TJSONArray);
//var
//  i : Integer;
//  resultados, jsonObjeto : TJSONObject;
//begin
////  cds_dados.DisableControls;
//
////  try
////    for i := 0 to jsonArray.Size - 1 do
////    begin
////      cds_dados.Append;
////      cds_dadosLogradouro.AsString  := TJSONObject(jsonArray.Get(i)).Get('logradouro').JsonValue.Value;
////      cds_dadosCEP.AsString         := TJSONObject(jsonArray.Get(i)).Get('cep').JsonValue.Value;
////      cds_dadosLocalidade.AsString  := UpperCase(TJSONObject(jsonArray.Get(0)).Get('localidade').JsonValue.Value);
////      cds_dadosBairro.AsString      := TJSONObject(jsonArray.Get(i)).Get('bairro').JsonValue.Value;
////      cds_dadosUF.AsString          := TJSONObject(jsonArray.Get(i)).Get('uf').JsonValue.Value;
////      cds_dadosComplemento.AsString := TJSONObject(jsonArray.Get(i)).Get('complemento').JsonValue.Value;
////      cds_dadosIBGE.AsString        := TJSONObject(jsonArray.Get(i)).Get('ibge').JsonValue.Value;
////      cds_dadosUnidade.AsString     := TJSONObject(jsonArray.Get(i)).Get('unidade').JsonValue.Value;
////      cds_dados.Post;
////    end;
////  finally
////    cds_dados.First;
////    cds_dados.EnableControls;
////  end;
//
//end;


//Function Get_Endereco(Cep:String; Var dsuf, nmcidade, nmbairro, nmlogradouro, dscomplemento:String):TJSONObject;
//Var
//HTTP  : TIdHTTP;
//Query : String;
//Buffer: String;
//
//Response: TStringStream;
//JsonArray: TJSONArray;
//logradouro:String;
//
//I:Integer;
//
//
//    RESTClient: TRESTClient;
//    RESTRequest: TRESTRequest;
//    RESTResponse: TRESTResponse;
//    RESTResponseDataSetAdapter: TRESTResponseDataSetAdapter;
//    FDMemTable: TFDMemTable;
//
//
//begin
//
//
//  try
//
//
//
//
//
//
//
//  HTTP := TIdHTTP.Create;
//
//
//   HTTP.Get('https://viacep.com.br/ws/' + CEP + '/json', Response);
//
//     if (HTTP.ResponseCode = 200) and not (UTF8ToString(Response.DataString) = '{'#$A'  "erro": true'#$A'}') then
//      begin
////        Memo_json.Text := UTF8ToString(Response.DataString);
//        Result := TJSONObject.ParseJSONValue(TEncoding.ASCII.GetBytes(UTF8ToString(Response.DataString)), 0) as TJSONObject;
//      end
//      else
//        raise Exception.Create('CEP inexistente!') ;
//
//
//       for I := 0 to jsonArray.Size - 1 do
//    begin
//       logradouro := TJSONObject(jsonArray.Get(i)).Get('logradouro').JsonValue.Value;
//
//    end;
//
//
//
////  Query := 'https://viacep.com.br/ws/'+ Cep + '/json/';
//
////  Buffer := HTTP.Get(Query);
//
//
//
//
//  finally
//
//
//  HTTP.Free;
//
//  end;
//
//
//end;



Function Set_Endereco_Integracao(Endereco_Integracao:TEndereco_Integracao):Boolean;
Var
Qry:TFDQuery;
ID_Endereco_Integracao:LongInt;
begin

  ID_Endereco_Integracao  :=0;

  try

   Qry              := TFDQuery.Create(Nil);
   Qry.Connection   := DM.Connection;


   Qry.Close;
   Qry.SQL.Clear;
   Qry.SQL.Add('INSERT INTO endereco(idendereco, dsuf, nmcidade, nmbairro, nmlogradouro, dscomplemento)');
   Qry.SQL.Add('VALUES');
   Qry.SQL.Add('(:idendereco, :dsuf, :nmcidade, :nmbairro, :nmlogradouro, :dscomplemento)');


   if Endereco_Integracao.idendereco <=0 then
   begin
      ID_Endereco_Integracao   := Get_Sequence('endereco_integracao_idendereco_seq');

   end
   else
   begin

   ID_Endereco_Integracao   := Endereco_Integracao.idendereco;

   end;


   Qry.ParamByName('idendereco').AsInteger      := ID_Endereco_Integracao;
   Qry.ParamByName('dsuf').AsString             := Endereco_Integracao.dsuf;
   Qry.ParamByName('nmcidade').AsString         := Endereco_Integracao.nmcidade;
   Qry.ParamByName('nmbairro').AsString         := Endereco_Integracao.nmbairro;
   Qry.ParamByName('nmlogradouro').AsString     := Endereco_Integracao.nmlogradouro;
   Qry.ParamByName('dscomplemento').AsString    := Endereco_Integracao.dscomplemento;


    try

     Qry.ExecSQL;

    except on E: Exception do

    DM.GravaLog(E.Message);

    end;





  finally

  Qry.Free;

  end;







end;



end.

