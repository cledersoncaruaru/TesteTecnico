unit DataBase.Generics;

interface

  uses
  UDM,
  System.SysUtils
  FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf,
  FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async,
  FireDAC.Phys, FireDAC.Phys.FBDef,
  FireDAC.VCLUI.Wait, FireDAC.Comp.UI,
  FireDAC.Phys.IBBase, FireDAC.Phys.FB,
  FireDAC.Comp.Client,
  Data.DB, FireDAC.Stan.Param,
  FireDAC.DatS, FireDAC.DApt.Intf,
  FireDAC.DApt, FireDAC.Comp.DataSet ;


  Function TabelaExiste ( NomeTabela : String ) : Boolean;
  Function GeneratorExiste ( NomeGenerator : String ) : Boolean;
  function CampoDaTabelaExiste(NomeTabela, NomeDoCampo: string): boolean;
  Function ReturnCountSQL(Query: TFDQuery): Longint;

  Function Get_ReturnNextCOD(NomeGenerator: String): Longint;
  Function Get_ReturnNextEmpresaCOD(NomeGenerator: String): Longint;
  Function Set_AjusteGenerator(NomeGenerator: String; FieldIDMax: String; Tabela: String): boolean;

  Function Get_Field_String_Param_Int (Field: String; Tabela:String; Param:string; vValue:Longint):String;
  Function Get_Field_String_Param_Str (Field: String; Tabela:String; Param:string; vValue:String):String;



implementation


Function Set_AjusteGenerator(NomeGenerator: String; FieldIDMax: String; Tabela: String): boolean;
var
  IDMax        : Longint;
  Qry          : TFDQuery;
begin

  Result := False;

  Qry := TFDQuery.Create(nil);

  case UserSession.Modulo_Ativo of

    TpErp   :  Qry.Connection := UserSession.Empresa;
    tpAdmin :  Qry.Connection := UserSession.Admin;

  end;

  try


    Qry.Close;
    Qry.SQL.Clear;
    Qry.SQL.Add('Select coalesce(max(' + FieldIDMax + '),0) from ' + Tabela);

    try

     Qry.Open;

    except on E: Exception do


      Telegram_Send(UserSession.CNPJLogado+'Auto Parts'+
                            ' Set_AjusteGenerator - '+ DateTimeToStr(now) +
                            ' Emitente:       '+ UserSession.ID_EmpLogada.ToString+
                            ' - CNPJ:         '+ UserSession.CNPJLogado+
                            ' - Error: '+ E.Message);


    end;





    IDMax := Qry.Fields[0].AsInteger;


    if IDMax > 0 then begin

      Qry.Close;
      Qry.SQL.Clear;
      Qry.SQL.Add('SET GENERATOR ' + NomeGenerator + ' TO ' + IntToStr(IDMax));

      Qry.ExecSQL;
      Result := True;



    end;

  finally
    Qry.DisposeOf;
  end;

end;

Function Get_ReturnNextCOD(NomeGenerator: String): Longint;
var
  Qry : TFDQuery;
BEGIN

  Result := 0;

  Qry := TFDQuery.Create(nil);

  case UserSession.Modulo_Ativo of

    TpErp   :  Qry.Connection := UserSession.Empresa;
    tpAdmin :  Qry.Connection := UserSession.Admin;

  end;

  try

    Qry.SQL.Add('SELECT GEN_ID(' + NomeGenerator + ', 1) AS NEWID FROM RDB$DATABASE');
    Qry.Open;

    If Qry.RecordCount <= 0 Then
      Exit;

    Result := StrToInt(Qry.FieldValues['NEWID']);

    If Result <= 0 Then
      Result := 0;

  finally
    Qry.DisposeOf;
  end;



END;

Function Get_ReturnNextEmpresaCOD(NomeGenerator: String): Longint;
var
  Qry : TFDQuery;
BEGIN

  Result := 0;

  Qry := TFDQuery.Create(nil);

//  case UserSession.Modulo_Ativo of

//    TpErp   :  Qry.Connection := UserSession.Empresa;
     Qry.Connection    := UserSession.Admin;

//  end;

  try

    Qry.SQL.Add('SELECT GEN_ID(' + NomeGenerator + ', 1) AS NEWID FROM RDB$DATABASE');
    Qry.Open;

    If Qry.RecordCount <= 0 Then
      Exit;

    Result := StrToInt(Qry.FieldValues['NEWID']);

    If Result <= 0 Then
      Result := 0;

  finally
    Qry.DisposeOf;
  end;



END;

Function ReturnCountSQL(Query: TFDQuery): Longint;
var
  Qry : TFDQuery;
begin

  Result:= 0;

  Qry := TFDQuery.Create(nil);

  case UserSession.Modulo_Ativo of

    TpErp     :  Qry.Connection := UserSession.Empresa;

    tpAdmin,
    tpSuporte :  Qry.Connection := UserSession.Admin;

  end;

  try

    Qry.SQL.Add('SELECT COUNT(*) FROM (' + Query.SQL.Text + ') AS TEMP1');

    try
      Qry.Open;
      Result := Qry.Fields[0].AsInteger;
     except

      on E: Exception do begin

        raise Exception.Create(E.Message);
        Telegram_Send('Phoenix.DataBase.Functions - ReturnCountSQL - '+ E.Message);

      end;

    end;

  finally
    Qry.DisposeOf;
  end;


end;

function TabelaExiste(NomeTabela: String): Boolean;
var
  Qry : TFDQuery;
begin

  Result:=FALSE;

  Qry := TFDQuery.Create(nil);

  case UserSession.Modulo_Ativo of

    TpErp   :  Qry.Connection := UserSession.Empresa;
    tpAdmin :  Qry.Connection := UserSession.Admin;

  end;

  try

    Qry.Sql.Add('select Distinct(RDB$RELATION_NAME) from RDB$RELATIONS');
    Qry.Sql.Add(' where RDB$SYSTEM_FLAG = 0  and');
    Qry.Sql.Add(' Upper(RDB$RELATION_NAME) = Upper('''+UpperCase(NomeTabela)+''')');

    try

      Qry.Open;

      If Qry.RecordCount>0 Then
        Result:=TRUE;

    except

      on E: Exception do begin

        raise Exception.Create(E.Message);
        Telegram_Send('Phoenix.DataBase.Functions - TabelaExiste - '+ E.Message);
        Result:= False;

      end;

    end;

  finally
    Qry.DisposeOf;
  end;

end;

Function GeneratorExiste ( NomeGenerator : String ) : Boolean;
var
  Qry  :TFDQuery;
begin

  Result:=FALSE;

  Qry := TFDQuery.Create(nil);

  case UserSession.Modulo_Ativo of

    TpErp   :  Qry.Connection := UserSession.Empresa;
    tpAdmin :  Qry.Connection := UserSession.Admin;

  end;

  try

    Qry.Sql.Add('SELECT RDB$GENERATOR_NAME FROM RDB$GENERATORS WHERE Upper(RDB$GENERATOR_NAME) = Upper('''+NomeGenerator+''')');

    try

      Qry.Open;

      If Qry.RecordCount>0 Then
        Result:=TRUE;

    except

      on E: Exception do begin

        raise Exception.Create(E.Message);
        Telegram_Send('Phoenix.DataBase.Functions - GeneratorExiste - '+ E.Message);
        Result:= False;

      end;

    end;

  finally
    Qry.DisposeOf;
  end;



END;

function CampoDaTabelaExiste(NomeTabela, NomeDoCampo: string): boolean;
var
  Qry : TFDQuery;
begin

  Result := False;

  Qry := TFDQuery.Create(nil);

  case UserSession.Modulo_Ativo of

    TpErp   :  Qry.Connection := UserSession.Empresa;
    tpAdmin :  Qry.Connection := UserSession.Admin;

  end;

  try

    Qry.SQL.Add('select RDB$RELATION_NAME, RDB$FIELD_NAME from RDB$RELATION_FIELDS');
    Qry.SQL.Add('  where');
    Qry.SQL.Add('  Upper(RDB$FIELD_NAME)    = ''' + NomeDoCampo + ''' AND');
    Qry.SQL.Add('  Upper(RDB$RELATION_NAME) = ''' + NomeTabela + '''');

    try

      Qry.Open;

      If Qry.RecordCount > 0 Then
        Result := True;

    except

      on E: Exception do begin

        raise Exception.Create(E.Message);
        Telegram_Send('Phoenix.DataBase.Functions - CampoDaTabelaExiste - '+ E.Message);
        Result:= False;

      end;

    end;

  finally
    Qry.DisposeOf;
  end;

END;

Function Get_Field_String_Param_Int (Field: String; Tabela:String; Param:string; vValue:Longint):String;
var
  Qry : TFDQuery;
begin

  Result := '';

  Qry := TFDQuery.Create(nil);

  case UserSession.Modulo_Ativo of

    TpErp   :  Qry.Connection := UserSession.Empresa;
    tpAdmin :  Qry.Connection := UserSession.Admin;

  end;

  try
    Qry.Close;
    Qry.SQL.Clear;
    Qry.SQL.Add('Select '+Field+' from '+Tabela+' where ' + Param+' = '+QuotedStr(vValue.ToString) );

    try

      Qry.Open;

      if not Qry.Fields[0].IsNull then
        Result := Qry.Fields[0].AsString;

    except
        on E: Exception do begin


        Telegram_Send(            'Phoenix.DataBase.Generics '+
                                  'CNPJ:'+UserSession.CNPJLogado+
                                  ' Get_Field_String_Param_Int - '+ DateTimeToStr(now) +
                                  ' Emitente:       '+ UserSession.ID_EmpLogada.ToString+
                                  ' - CNPJ:         '+ UserSession.CNPJLogado+
                                  ' - Error: '+ E.Message);



        end;

    end;

  finally
    Qry.FREE;
  end;

end;

Function Get_Field_String_Param_Str (Field: String; Tabela:String; Param:string; vValue:String):String;
var
  Qry : TFDQuery;
begin

  Result := '';

  Qry := TFDQuery.Create(nil);

  case UserSession.Modulo_Ativo of

    TpErp   :  Qry.Connection := UserSession.Empresa;
    tpAdmin :  Qry.Connection := UserSession.Admin;

  end;




  try

    Qry.Close;
    Qry.SQL.Clear;
    Qry.SQL.Add('Select '+Field+' from '+Tabela+' where ' + Param+' = '+QuotedStr(vValue) );

    try

      Qry.Open;

      if not Qry.Fields[0].IsNull then
        Result := Qry.Fields[0].AsString;

    except

        on E: Exception do begin


           Telegram_Send(UserSession.CNPJLogado+'Auto Parts: Error Na Função Get_Field_String_Param_Str '+
                                  ' Get_Field_String_Param_Str: - '+ DateTimeToStr(now) +
                                  ' Emitente:       '+ UserSession.ID_EmpLogada.ToString+
                                  ' - CNPJ:         '+ UserSession.CNPJLogado+
                                  ' - Error: '+ E.Message);



        end;


    end;

  finally
    Qry.Free;
  end;

end;


end.

